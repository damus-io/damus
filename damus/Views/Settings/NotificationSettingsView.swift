//
//  NotificationSettings.swift
//  damus
//
//  Created by William Casarin on 2023-04-05.
//

import SwiftUI

struct NotificationSettingsView: View {
    let damus_state: DamusState
    @ObservedObject var settings: UserSettingsStore
    @State var notification_mode_setting_error: String? = nil
    
    @Environment(\.dismiss) var dismiss
    
    func indicator_binding(_ val: NewEventsBits) -> Binding<Bool> {
        return Binding.init(get: {
            (settings.notification_indicators & val.rawValue) > 0
        }, set: { v in
            if v {
                settings.notification_indicators |= val.rawValue
            } else {
                settings.notification_indicators &= ~val.rawValue
            }
        })
    }
    
    func try_to_set_notifications_mode(new_value: UserSettingsStore.NotificationsMode) {
        notification_mode_setting_error = nil
        if new_value == .push {
            Task {
                do {
                    try await damus_state.push_notification_client.send_token()
                    settings.notifications_mode = new_value
                }
                catch {
                    notification_mode_setting_error = String(format: NSLocalizedString("Error configuring push notifications with the server: %@", comment: "Error label shown when user tries to enable push notifications but something fails"), error.localizedDescription)
                }
            }
        }
        else {
            Task {
                do {
                    try await damus_state.push_notification_client.revoke_token()
                    settings.notifications_mode = new_value
                }
                catch {
                    notification_mode_setting_error = String(format: NSLocalizedString("Error disabling push notifications with the server: %@", comment: "Error label shown when user tries to disable push notifications but something fails"), error.localizedDescription)
                }
            }
        }
    }
    
    var body: some View {
        Form {
            if settings.enable_experimental_push_notifications {
                Section(
                    header: Text("General", comment: "Section header for general damus notifications user configuration"),
                    footer: VStack {
                        if let notification_mode_setting_error {
                            Text(notification_mode_setting_error)
                                .foregroundStyle(.damusDangerPrimary)
                        }
                    }
                ) {
                    Picker(NSLocalizedString("Notifications mode", comment: "Prompt selection of the notification mode (Feature to switch between local notifications (generated from user's own phone) or push notifications (generated by Damus server)."),
                        selection: Binding(
                                get: { settings.notifications_mode },
                                set: { newValue in
                                    self.try_to_set_notifications_mode(new_value: newValue)
                                }
                        )
                    ) {
                        ForEach(UserSettingsStore.NotificationsMode.allCases, id: \.self) { notification_mode in
                            Text(notification_mode.text_description())
                                .tag(notification_mode.rawValue)
                        }
                    }
                }
            }
            
            Section(header: Text("Local Notifications", comment: "Section header for damus local notifications user configuration")) {
                Toggle(NSLocalizedString("Zaps", comment: "Setting to enable Zap Local Notification"), isOn: $settings.zap_notification)
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Mentions", comment: "Setting to enable Mention Local Notification"), isOn: $settings.mention_notification)
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Reposts", comment: "Setting to enable Repost Local Notification"), isOn: $settings.repost_notification)
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Likes", comment: "Setting to enable Like Local Notification"), isOn: $settings.like_notification)
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("DMs", comment: "Setting to enable DM Local Notification"), isOn: $settings.dm_notification)
                    .toggleStyle(.switch)
            }

            Section(header: Text("Notification Preference", comment: "Section header for Notification Preferences")) {
                Toggle(NSLocalizedString("Show only from users you follow", comment: "Setting to Show notifications only associated to users your follow"), isOn: $settings.notification_only_from_following)
                    .toggleStyle(.switch)
            }
            
            Section(header: Text("Notification Dots", comment: "Section header for notification indicator dot settings")) {
                Toggle(NSLocalizedString("Zaps", comment: "Setting to enable Zap Local Notification"), isOn: indicator_binding(.zaps))
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Mentions", comment: "Setting to enable Mention Local Notification"), isOn: indicator_binding(.mentions))
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Reposts", comment: "Setting to enable Repost Local Notification"), isOn: indicator_binding(.reposts))
                    .toggleStyle(.switch)
                Toggle(NSLocalizedString("Likes", comment: "Setting to enable Like Local Notification"), isOn: indicator_binding(.likes))
                    .toggleStyle(.switch)
            }
        }
        .navigationTitle("Notifications")
        .onReceive(handle_notify(.switched_timeline)) { _ in
            dismiss()
        }
    }
}


struct NotificationSettings_Previews: PreviewProvider {
    static var previews: some View {
        NotificationSettingsView(damus_state: test_damus_state, settings: UserSettingsStore())
    }
}
